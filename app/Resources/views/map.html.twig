{% extends 'BathSU.html.twig' %}
{% block headerbottom %}
Control Room Log Map
{% endblock %}
{% block layout %}
    {% embed '3-9.html.twig' %}
        {% block content %}
            <div class="wrapper">
                <div class="row" id="logMapRow">
                    <div class="col-md-12">
                        {% if overlayFileName is empty %}
                            No map available
                        {% else %}
                            <div id="largeLogMap">
                                Loading Map...
                            </div>
                        {% endif %}  
                    </div>
                </div>
                <div class="row" id="Legend">
                    <div class="col-md-12">
                        <h4>Legend</h4>
                        <div class="col-md-2">
                            <strong>Log Type</strong>
                            <ul class="list-group">
                                <li class="list-group-item"><span class="label label-default">Closed</span></li>
                                <li class="list-group-item"><span class="label label-primary">General</span></li>
                                <li class="list-group-item"><span class="label label-info">Lost Property</span></li>
                            </ul>
                        </div>
                        <div class="col-md-2">
                            <strong>Severity / Priority</strong>
                            <ul class="list-group">
                                <li class="list-group-item"><span class="label severity1">Very High</span></li>
                                <li class="list-group-item"><span class="label severity2">High</span></li>
                                <li class="list-group-item"><span class="label severity3">Medium</span></li>
                                <li class="list-group-item"><span class="label severity4">Low</span></li>
                                <li class="list-group-item"><span class="label severity5">Very Low</span></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        {% endblock %}
        {% block sidebar %}
            {% include 'sidebar.twig' %}
        {% endblock %}
    {% endembed %}
{% endblock %}
{% block scripts %}
    <script type="text/javascript">
        $(function () {
            $('[data-toggle="tooltip"]').tooltip();
        });
        
        {% if (longitude is not null) and (latitude is not null) %}
        
            /* 
            * To change this license header, choose License Headers in Project Properties.
            * To change this template file, choose Tools | Templates
            * and open the template in the editor.
            */

            var overlay;
            EventSiteOverlay.prototype = new google.maps.OverlayView();

            // Initialize the map and the custom overlay.

            function initMap() {
                var map = new google.maps.Map(document.getElementById('largeLogMap'), {
                    zoom: 18,
                    center: {lat: {{ latitude }}, lng: {{ longitude }}},
                    mapTypeId: 'satellite'
                });
                
                map.data.loadGeoJson('{{ path('map_filter_type_json_data', {'filter': filter, 'filter_type': filter_type}) }}');
                
                map.data.setStyle(function(feature) {
                    var colour = feature.getProperty('colour');
                    var zI = feature.getProperty('zIndex');
                    return {
                        icon: "https://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=%20|" + colour,
                        zIndex: zI
                    };
                });
                
                var infowindow = new google.maps.InfoWindow();
                
                map.data.addListener('click', function(event) {
                    //var blurb = event.feature.getProperty('blurb');
                    //var id = event.feature.getProperty('id');
                    //var sec_severity = event.feature.getProperty('sec_severity');
                    //var med_severity = event.feature.getProperty('med_severity');
                    //var med_type = event.feature.getProperty('med_type');
                    //var sec_type = event.feature.getProperty('sec_type');
                    
                    infowindow.setContent( "This is an info window");
                    infowindow.open(map, event.feature.getGeometry().get());
                    
                });

                var bounds = new google.maps.LatLngBounds(
                    new google.maps.LatLng({{ NEbound }}),
                    new google.maps.LatLng({{ SWbound }})
                );

                var srcImage = '{{ url('overlay', {'filename': overlayFileName}) }}';

                overlay = new EventSiteOverlay(bounds, srcImage, map);

            }

            /** @constructor */
            function EventSiteOverlay(bounds, image, map) {

                // Initialize all properties.
                this.bounds_ = bounds;
                this.image_ = image;
                this.map_ = map;

                // Define a property to hold the image's div. We'll
                // actually create this div upon receipt of the onAdd()
                // method so we'll leave it null for now.
                this.div_ = null;

                // Explicitly call setMap on this overlay.
                this.setMap(map);
            }

            /**
             * onAdd is called when the map's panes are ready and the overlay has been
             * added to the map.
             */
            EventSiteOverlay.prototype.onAdd = function() {

                var div = document.createElement('div');
                div.style.borderStyle = 'none';
                div.style.borderWidth = '0px';
                div.style.position = 'absolute';

                // Create the img element and attach it to the div.
                var img = document.createElement('img');
                img.src = this.image_;
                img.style.width = '100%';
                img.style.height = '100%';
                img.style.position = 'absolute';
                div.appendChild(img);

                this.div_ = div;

                // Add the element to the "overlayLayer" pane.
                var panes = this.getPanes();
                panes.overlayLayer.appendChild(div);
            };

            EventSiteOverlay.prototype.draw = function() {

                // We use the south-west and north-east
                // coordinates of the overlay to peg it to the correct position and size.
                // To do this, we need to retrieve the projection from the overlay.
                var overlayProjection = this.getProjection();

                // Retrieve the south-west and north-east coordinates of this overlay
                // in LatLngs and convert them to pixel coordinates.
                // We'll use these coordinates to resize the div.
                var sw = overlayProjection.fromLatLngToDivPixel(this.bounds_.getSouthWest());
                var ne = overlayProjection.fromLatLngToDivPixel(this.bounds_.getNorthEast());

                // Resize the image's div to fit the indicated dimensions.
                var div = this.div_;
                div.style.left = sw.x + 'px';
                div.style.top = ne.y + 'px';
                div.style.width = (ne.x - sw.x) + 'px';
                div.style.height = (sw.y - ne.y) + 'px';
                div.style.opacity = "0.7";
            };

            // The onRemove() method will be called automatically from the API if
            // we ever set the overlay's map property to 'null'.
            EventSiteOverlay.prototype.onRemove = function() {
                this.div_.parentNode.removeChild(this.div_);
                this.div_ = null;
            };

            google.maps.event.addDomListener(window, 'load', initMap);
        {% endif %}
        
    </script>
{% endblock %}
