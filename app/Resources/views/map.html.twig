{% extends 'BathSU.html.twig' %}
{% block headerbottom %}
Control Room Log Map
{% endblock %}
{% block layout %}
    {% embed '3-9.html.twig' %}
        {% block content %}
            <div class="wrapper">
                <div class="row" id="logMapRow">
                    <div class="col-md-12">
                        {% if overlayFileName is empty %}
                            No map available
                        {% else %}
                            <div id="largeLogMap">
                                Loading Map...
                            </div>
                        {% endif %}  
                    </div>
                </div>
                <div class="row" id="Legend">
                    <div class="col-md-12">
                        <h4>Legend</h4>
                        <div class="col-md-2">
                            <strong>Log Type</strong>
                            <ul class="list-group">
                                <li class="list-group-item"><span class="label label-default">Closed</span></li>
                                <li class="list-group-item"><span class="label label-primary">General</span></li>
                                <li class="list-group-item"><span class="label label-info">Lost Property</span></li>
                            </ul>
                        </div>
                        <div class="col-md-2">
                            <strong>Severity / Priority</strong>
                            <ul class="list-group">
                                <li class="list-group-item"><span class="label severity1">Very High</span></li>
                                <li class="list-group-item"><span class="label severity2">High</span></li>
                                <li class="list-group-item"><span class="label severity3">Medium</span></li>
                                <li class="list-group-item"><span class="label severity4">Low</span></li>
                                <li class="list-group-item"><span class="label severity5">Very Low</span></li>
                            </ul>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label>Filter by Status</label>
                                <select id = "filter" class = "form-control" onchange="setFilter(this)">
                                    <option value = "all" class = "form-control">All</option>
                                    <option value = "open" class = "form-control">Open</option>
                                    <option value = "closed" class = "form-control">Closed</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label>Filter by Type</label>
                                <select id = "typeFilter" class = "form-control" onchange="setTypeFilter(this)">
                                    <option value = "all" class = "form-control">All</option>
                                    <option value = "medical" class = "form-control">Medical</option>
                                    <option value = "security" class = "form-control">Security</option>
                                    <option value = "general" class = "form-control">General</option>
                                    <option value = "lost" class = "form-control">Lost Property</option>
                                </select>
                            </div>
                        </div>                        
                    </div>
                </div>
            </div>
        {% endblock %}
        {% block sidebar %}
            {% include 'sidebar.twig' %}
            {% include 'darksky.html.twig' %}
        {% endblock %}
    {% endembed %}
{% endblock %}
{% block scripts %}
    <script type="text/javascript">
        $(function () {
            $('[data-toggle="tooltip"]').tooltip();
        });
        var filter = null;
        var typeFilter = null;
        
        function setFilter(sel) {
            filter = sel.value;
            initMap();
        }
        
        function setTypeFilter(sel) {
            typeFilter = sel.value;
            initMap();
        }
        
        {% if (longitude is not null) and (latitude is not null) %}
        
            /* 
            * To change this license header, choose License Headers in Project Properties.
            * To change this template file, choose Tools | Templates
            * and open the template in the editor.
            */
            
            var overlay;
            EventSiteOverlay.prototype = new google.maps.OverlayView();

            // Initialize the map and the custom overlay.
           
            function initMap() {
                var map = new google.maps.Map(document.getElementById('largeLogMap'), {
                    zoom: 18,
                    center: {lat: {{ latitude }}, lng: {{ longitude }}},
                    mapTypeId: 'satellite'
                });
                
                loadGeoJson(map, '{{ path('map_json_data') }}'+'/'+filter+'/'+typeFilter);
                
                var infowindow = new google.maps.InfoWindow();
                
                map.data.addListener('click', function(event) {

                    var marker = event.feature.getProperty('marker');
                    var info_content = "";
                    
                    if (marker['field_user'])
                    {
                        var field_user = marker['field_user'];
                        var utc_location_timestamp = moment.tz(marker['field_user_timestamp']['date'], marker['field_user_timestamp']['timezone']);
                        var location_timestamp = moment(utc_location_timestamp).local();
                        info_content = '<div><h4>'+field_user+'</h4><p>Last Updated: '+location_timestamp.format("YYYY-MM-DD HH:mm:ss")+'</p></div>';
                        
                    } else {
                                            
                        var logs = marker['logs'];
                        var arrayLength = Object.keys(logs).length;

                        for (var i = 0; i < arrayLength; i++) {

                            var log = logs[i];

                            var security = "";
                            if (log['security_incident_description'])
                            {
                                if(log['security_entry_closed_time'])
                                {
                                    security = '<span class="label label-default">'+
                                            log['security_incident_description']+
                                            '</span> &nbsp';
                                } else {
                                    security = '<span class="label severity'+log['severity']+'">'+
                                            log['security_incident_description']+
                                            '</span> &nbsp';
                                }
                            }
                            var medical = "";
                            if (log['medical_injury_description'])
                            {
                                if(log['medical_entry_closed_time'])
                                {
                                    medical = '<span class="label label-default">'+
                                            log['medical_injury_description']+
                                            '</span> &nbsp';
                                } else {
                                    medical = '<span class="label severity'+log['medical_severity']+'">'+
                                            log['medical_injury_description']+
                                            '</span> &nbsp';
                                }
                            }
                            var general = "";
                            if (log['general_description'])
                            {
                                if(log['general_entry_closed_time'])
                                {
                                    general = '<span class="label label-default">'+
                                            log['general_description'].substring(0,30)+"..."+
                                            '</span> &nbsp';
                                } else {
                                    general = '<span class="label label-primary">'+
                                            log['general_description'].substring(0,30)+"..."+
                                            '</span> &nbsp';
                                }
                            }
                            var lost = "";
                            if (log['lost_property_description'])
                            {
                                if(log['lost_property_entry_closed_time'])
                                {
                                    lost = '<span class="label label-default">'+
                                            log['lost_property_description'].substring(0,30)+"..."+
                                            '</span> &nbsp';
                                } else {
                                    lost = '<span class="label label-info">'+
                                            log['lost_property_description'].substring(0,30)+"..."+
                                            '</span> &nbsp';
                                }
                            }

                            var url = "{{ path('edit_entry') }}";
                            var utc_log_date = moment.tz(log['log_entry_open_time']['date'], log['log_entry_open_time']['timezone']);
                            var log_date = moment(utc_log_date).local();
                            var content = '<div><a href="'+url+'/'+log['id']+'">'+
                                '<h4>'+log['log_blurb']+'</h4></a>'+
                                '<p>'+log_date.format("YYYY-MM-DD HH:mm:ss")+'<br>'+
                                'Location: '+log['location']+'<br>'+
                                'Reported By: '+log['reported_by']+'</p>'+
                                medical+security+general+lost+
                                '</div>';

                            info_content = info_content+content;
                        }
                    }

                    infowindow.setContent(info_content);
                    infowindow.setPosition(event.feature.getGeometry().get());
                    infowindow.setOptions({pixelOffset: new google.maps.Size(0,-30)});
                    infowindow.open(map);
                    
                });

                var bounds = new google.maps.LatLngBounds(
                    new google.maps.LatLng({{ NEbound }}),
                    new google.maps.LatLng({{ SWbound }})
                );

                var srcImage = '{{ url('overlay', {'filename': overlayFileName}) }}';

                overlay = new EventSiteOverlay(bounds, srcImage, map);

            }
            

            /** @constructor */
            function EventSiteOverlay(bounds, image, map) {

                // Initialize all properties.
                this.bounds_ = bounds;
                this.image_ = image;
                this.map_ = map;

                // Define a property to hold the image's div. We'll
                // actually create this div upon receipt of the onAdd()
                // method so we'll leave it null for now.
                this.div_ = null;

                // Explicitly call setMap on this overlay.
                this.setMap(map);
            }

            /**
             * onAdd is called when the map's panes are ready and the overlay has been
             * added to the map.
             */
            EventSiteOverlay.prototype.onAdd = function() {

                var div = document.createElement('div');
                div.style.borderStyle = 'none';
                div.style.borderWidth = '0px';
                div.style.position = 'absolute';

                // Create the img element and attach it to the div.
                var img = document.createElement('img');
                img.src = this.image_;
                img.style.width = '100%';
                img.style.height = '100%';
                img.style.position = 'absolute';
                div.appendChild(img);

                this.div_ = div;

                // Add the element to the "overlayLayer" pane.
                var panes = this.getPanes();
                panes.overlayLayer.appendChild(div);
            };

            EventSiteOverlay.prototype.draw = function() {

                // We use the south-west and north-east
                // coordinates of the overlay to peg it to the correct position and size.
                // To do this, we need to retrieve the projection from the overlay.
                var overlayProjection = this.getProjection();

                // Retrieve the south-west and north-east coordinates of this overlay
                // in LatLngs and convert them to pixel coordinates.
                // We'll use these coordinates to resize the div.
                var sw = overlayProjection.fromLatLngToDivPixel(this.bounds_.getSouthWest());
                var ne = overlayProjection.fromLatLngToDivPixel(this.bounds_.getNorthEast());

                // Resize the image's div to fit the indicated dimensions.
                var div = this.div_;
                div.style.left = sw.x + 'px';
                div.style.top = ne.y + 'px';
                div.style.width = (ne.x - sw.x) + 'px';
                div.style.height = (sw.y - ne.y) + 'px';
                div.style.opacity = "0.7";
            };

            // The onRemove() method will be called automatically from the API if
            // we ever set the overlay's map property to 'null'.
            EventSiteOverlay.prototype.onRemove = function() {
                this.div_.parentNode.removeChild(this.div_);
                this.div_ = null;
            };

            google.maps.event.addDomListener(window, 'load', initMap);
            
            function loadGeoJson(map, geoJson)
            {               
                
                map.data.forEach(function (feature) {
                    map.data.remove(feature);
                });
                
                
                map.data.loadGeoJson(geoJson);
                
                map.data.setStyle(function(feature) {
                    
                    var marker = feature.getProperty('marker');
                    if (marker['field_user'])
                    {
                        var field_user = marker['field_user'];
                        //icon: "https://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=%20|" + colour;
                        //icon: "https://chart.googleapis.com/chart?chst=d_bubble_icon_text_small&chld=star|bb|"+field_user+"|FFFFFF|000000";
                        return {
                                icon: "https://chart.apis.google.com/chart?chst=d_map_pin_icon&chld=glyphish_user|fff"
                            };
                            
                    } else {
                        var colour = marker['colour'];
                        var logs = marker['logs'];
                        var arrayLength = Object.keys(logs).length;
                        
                        if (arrayLength > 1)
                        {
                            return {
                                icon: "https://chart.apis.google.com/chart?chst=d_map_pin_letter&chld="+arrayLength+"|" + colour
                            };
                        } else {
                            return {
                                icon: "https://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=%20|" + colour
                            };
                        }
                    }
                });
                setTimeout(function(){ loadGeoJson(map, geoJson); }, 10000);
            }
            
        {% endif %}
        
    </script>
{% endblock %}
